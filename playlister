#! /usr/bin/env sh
__ScriptVersion="0.3.2"

set_default_values() {
  NUMBER_OF_FILES_TO_KEEP=7
  QUALITY="best[height=720]"
}

set_naming_format() {
  NAMING_FORMAT="%(playlist_index)s %(title)s.%(ext)s"
}

usage ()
{
  BASENAME="$(basename "$0")"
  echo "Usage: $BASENAME [options] [filename/ID]

Options:
  -h            Display this message.
  -v            Display version number.

Filename:
  Filename starting with a number representing the position in the playlist and a space.

ID:
  Number represeting the position in the playlist. Defaults to 1.

$BASENAME searches for a .playlister file in the current directory and uses
the first line as the playlist URL. 
It fetches 10 files starting with the number that is passed as an argument.
"
}

handle_options() {
  while getopts ":hv" opt
  do
    case $opt in
    h|help     )  usage; exit 0   ;;
    v|version  )  echo "$(basename "$0") v$__ScriptVersion"; exit 0   ;;
    * )  printf "\nOption does not exist : %s\n" "$OPTARG"
        usage; exit 1   ;;
    esac
  done
  shift $((OPTIND-1))
}

check_dot_playlister() {
  if [ ! -f .playlister ];then
    echo "Error: .playlister not found. Create it and make sure the first line is the URL of the playlist. See -h" >&2
    exit 2
  elif [ ! -s .playlister ];then
    echo "Error: .playlister is empty. The first line must be the URL of the playlist. See -h" >&2
    exit 3
  fi
}

get_playlist_url() {
  PLAYLIST_URL="$(head -n1 .playlister)"
}

get_optional_switches() {
  OPTIONAL_SWITCHES=$(head -n2 .playlister|tail -n1)
}

get_filecount() {
  FILECOUNT=$(ls ./*.mp4 2>/dev/null | wc -l | tr -d " ")
}

get_lowest_id() {
  LOWEST_ID=$(ls *.mp4 2>/dev/null | head -n1 | cut -d" " -f1 | sed 's/^0*//')
}

calculate_bounds() {
  PLAYLIST_START=$(echo "$1" | cut -d" " -f1 | sed 's/^0*//')

  case $PLAYLIST_START in
    '' | *[!0-9]*)
      PLAYLIST_START=1;;
  esac

  PLALIST_END=$((PLAYLIST_START + NUMBER_OF_FILES_TO_KEEP - 1))
}

check_if_moving_forward() {
  if [ "$PLAYLIST_START" -le "$LOWEST_ID" ] 2>/dev/null; then
    echo "Warning: Requested files are older than already existing ones. Downloading but refusing to delete." >&2
    echo "Press Return to dowload or Ctrl-C to cancel."
    SKIP_DELETE=true
    read REPLY
  fi
}

download_active_part_of_playlist() {
  yt-dlp --playlist-start $PLAYLIST_START \
             --playlist-end $PLALIST_END \
             "$PLAYLIST_URL" \
             -o "$NAMING_FORMAT" \
             -f "$QUALITY" \
             -R "infinite" \
             $OPTIONAL_SWITCHES
}

delete_old_videos() {
  NUMBER_OF_FILES_TO_DELETE=$((FILECOUNT - NUMBER_OF_FILES_TO_KEEP))
  if [ $SKIP_DELETE ]; then
    printf "Skipping delete step due to the requested files being older than already existing ones.\n\n"
  elif [ $NUMBER_OF_FILES_TO_DELETE -gt 0 ];then
    ls ./*.mp4 | head -n $NUMBER_OF_FILES_TO_DELETE | perl -lne 'print quotemeta' | xargs rm
  fi
}

handle_options "$@"
check_dot_playlister
get_playlist_url
get_optional_switches
get_lowest_id
set_naming_format
set_default_values
calculate_bounds "$1"
check_if_moving_forward
download_active_part_of_playlist
get_filecount
delete_old_videos
